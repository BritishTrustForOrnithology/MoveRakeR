% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/speed_filt.R
\name{speed_filt}
\alias{speed_filt}
\alias{traj_speed}
\title{Trajectory speed filter for GPS data}
\usage{
speed_filt(
  data,
  sp_thres = 50,
  annotate = FALSE,
  hasgaps = TRUE,
  verbose = TRUE,
  detailed_verbose = FALSE
)

traj_speed(data, within_gap = FALSE)
}
\arguments{
\item{data}{Input data object, with required columns: TagID, DateTime, longitude, latitude.}

\item{sp_thres}{The value (m/s) upon which to carry out the filter assessment, defaults to 50 m/s.}

\item{annotate}{TRUE or FALSE (default) for whether to annotate (TRUE) or filter (FALSE) the data by the sp_thres condition.}

\item{hasgaps}{TRUE (default) or FALSE whether to check for existing gaps having been defined already in the data,
and if found use those gaps, if not reverting to \code{gap_section} defaults; FALSE also takes the \code{gap_section} defaults.}

\item{verbose}{TRUE (default) or FALSE whether to provide within-function messaging.}

\item{detailed_verbose}{TRUE or FALSE (default) whether more detailed messaging is to be provided.}

\item{within_gap}{For the \code{traj_speed} function, this checks for existence of gapsec column, if not, it fails. As the
\code{traj_speed} function is called from within \code{speed_filt}, which itself always uses a gapsection even if it is function defaults,
this allows \code{traj_speed} to be used without fail.}
}
\value{
Either an annotated dataset with an additional column of 'speed_rm' (1,0) for whether data were 'flagged', or a filtered
dataset with such rows having been removed.
}
\description{
Annotate or filter data that is apparently too fast for real animal movement based on a pre-defined threshold.
}
\details{
A common task when dealing with GPS movement data is to consider fixes in the dataset that
may be moving much faster than expected based on the upper limit of known movement speeds for the study animal.
There are such filters available in a variety of R packages, each with their own methodology that the user is
also directed to, such as \code{trip::speedfilter} and trip::sd() (Sumner et al. 2009, Sumner 2011).
Comparisons to other functions in neighbouring R packages will likely
give slightly different results. As with all such annotation and filter functions, care is needed to make sure the results are as expected, and
it should be stressed the MoveRakeR function \code{speed_filt} is not a filter by a speed value
The MoveRakeR approach provides further options alongside these other R packages and works by iteratively remove GPS fixes that violate a threshold.
This is particularly useful should several consecutive erroneous points be identified (i.e. displaced from where they should be).
Caution is also needed when considering GPS sampling rates as maximum finer-scale (or coarser-scale) changes between consecutive
fixes could vary among different scales. Finer scale sampling for stationary animals may reflect natural GPS error that
could yield otherwise erroneous travel speeds and so may need considering rate-by-rate. This pattern can also
be examined further using the function \code{speed_jit}.

Here the default value in the speed filter is 50 m/s and this will depend on the species studied.
The value should be chosen wisely as mentioned above, taking a value well within the natural bounds of movement
of the animal will result in fixes being dropped that are otherwise valid due to the cumulative nature of the filter.
It is recommended therefore that a conservative value be selected above the maximum known speed of the animal, again paying
attention to artefacts that could occur by sampling rate.

The \code{speed_filt} uses the function \code{traj_speed} to compute trajectory speed between consecutive fixes
within animals. This computation can be carried out 'within_gap' should gaps already be present in the data.
}
\examples{
### loading a raw data format
indata <- yourdata # data.frame with a minimum of columns named TagID, DateTime, longitude, latitude
data <- Track(indata)

dat_speed_fil = speed_filt(data, annotate = TRUE, detailed_verbose = FALSE)

data_ = traj_speed(dat_speed_fil, within_gap = FALSE) # use of traj_speed

attr(data_, "speed_filt")
sum(dat_speed_fil$speed_rm) # n = X fixes dropped

# Compare also to other functions from other packages
# e.g. the trip package and function trip::speedfilter()

# This may take a little while (for a test of a 750K row dataset ca 10 mins on
# an Intel(R) Core(TM) i3-3220 CPU @ 3.30GHz 8GB machine depending on memory use) to coerce big data:
data_in_trip <- data_in \%>\% data.frame() \%>\% # to remove the MoveRakeR::Track class
 rename(x = longitude, y = latitude, trip_id = TagID, time= DateTime)  \%>\% # for trip
 relocate(c(x,y,time, trip_id),.before = Type) \%>\% # make sure order is correct x,y,time,trip_id
 mutate(time = as.POSIXct(time)) \%>\% trip::trip()
test_sp_filt <- trip::speedfilter(data_in_trip, max.speed = 50*3.6, test = FALSE) # m/s to km/h
data_in_trip$outlier <- ifelse(test_sp_filt,1,0)

}
\seealso{
\link{turn_filt}
}
