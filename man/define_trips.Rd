% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/define_trips.R
\name{define_trips}
\alias{define_trips}
\alias{make_shape}
\title{Add numbered trips to telemetry data based on a central place}
\usage{
define_trips(
  data,
  use_current_by = FALSE,
  by = NULL,
  birdyear = TRUE,
  definetrips = TRUE,
  GIS = TRUE,
  method = "rect",
  lls = NULL,
  radius = 1000,
  Flag = NULL,
  keep_extra_row = TRUE,
  new_after_gap = TRUE,
  Flag_options = "Maximal",
  trip_lab_noend = FALSE,
  trip_lab_nostart = FALSE,
  tripcon_sten = TRUE,
  p4s = 3035,
  verbose = TRUE
)

make_shape(method = "rect", radius = 1000, lls = NULL, p4s = 3035)
}
\arguments{
\item{data}{Input data object, with required columns: TagID, DateTime, longitude, latitude.}

\item{use_current_by}{An option (logical default FALSE) to use the existing tidy by variable structure in the data
but including TagID as the highest level grouping if not included. Could lead to unexpected results so
check this carefully. Default is to use by variable grouping, set to NULL with birdyear TRUE to giving TagID, year by default.}

\item{by}{Additional by variables to group the data by for assessing trips, e.g. if you bootstrap the data
from sub-sampling perhaps, then you may want by = "boot"; if the \code{birdyear} argument
is TRUE, the actual grouping would then be: c(TagID, year, boot).}

\item{birdyear}{whether to assess animals as bird-years i.e. if a large gap in monitoring between seasons, or just as birds (defaults to TRUE for birdyears).}

\item{definetrips}{Logical defaulting to TRUE if the second part of the defining of trips is to be carried out.}

\item{GIS}{Logical defaulting to TRUE if the first part of the GIS processing within the function is to be carried out.}

\item{method}{A character string, one of \code{rect}, \code{circ}, \code{shape} or \code{flag}.
Each method represents an approach for the area chosen from which to determine trips from a central place.
With the exception of the \code{flag} method thus being (1) a rectangle or square, (2)
a circle (note not an ellipse), (3) a polygon of any  shape the user wishes (e.g. based on habitat or geographic boundaries)
and (4) a specific column in the data, with the name of that column given by \code{Flag = variable} - see below.
Methods rely on the argument \strong{lls} - see below - to define geometry boundaries, midpoints, or
a polygon of the shape itself. For the method \code{shape},
it is highly recommended that the shape be a single polygon - the \code{define_trips} function
has not been tested on multiple polygons and could cause complexities and confusions. Should
multiple areas be of interest, then specific separate definition of those areas with separate shapes
is recommended or using methods such as R package \code{recurse}.
The \code{flag} method can also be used in conjunction with the other three methods to take a combination of
trips identified by the shapes selected with the further \code{flag} information - i.e.
points identified as falling inside the rectangle, circle or shape, and/or also matching
the separate \code{Flag} column in the dataset. The user can also choose from two
\code{Flag_options} - see below - to determine how the shapes and flags are combined.}

\item{lls}{A vector used for determining the boundaries or inputs for the shape of the central place.
For the \code{rect} method, lls \strong{must} be a vector of length 4, representing the
\code{c(minlong, maxlat, maxlong, minlat)} of the bounding box to be used; for the \code{circ}
method, \code{lls} must be a vector of length 2 representing \code{longitude,latitude} of
the central point, and must be accompanied by a value for the \code{radius} for which
a buffer is applied around the central point - see below. For method \code{shape}, an object of
class \code{sf} is required, restricted here for the simple feature \code{POLGON} geometry. \code{lls} is not required for the \code{flag} method when used on its own.
Coordinates for lls under \code{rect} and \code{circ} are expected as geographic WGS84. The method \code{shape} supplied
will be projected to the given CRS provided through \code{p4s}.}

\item{radius}{The radius around the central point for the \code{circ} method - see above, specified
as a numeric value in metres, defaulting to 1000 m if no value is provided.}

\item{Flag}{Named column in the dataset, indicating whether an animal is deemed to be in a
colony, or central place starting point. This column is used in the \code{flag} method
and in conjunction with the other three methods for a combination approach. The variable \code{Flag} for the
\code{flag} method must be a binary column of 1 or 0 for locations assigned as inside or outside
the colony, for instance by other methods such as visual re-sighting surveys, cameras or telemetry base station automatic detection, etc.}

\item{keep_extra_row}{Logical defaults to TRUE for keeping the extra row for trip statistics,
if a bird comes back to the colony and leaves again before registering a second fix there.}

\item{new_after_gap}{Logical. Whether to start a new trip after a \emph{"gap"} in the
date-time telemetry record; gaps are initially determined through the function \code{\link{clean_GPS}}
and can be set there to any length defined by the user. Should new gaps be decided upon after
\code{clean_GPS} then function \code{\link{gap_section}} can be used to re-define gapsections.
The issue here is related to potentially \strong{incomplete} trips when the tag may stop recording
for some reason, e.g. low battery, but where an animal can still be away
on a trip after the gap (i.e. did it come back and leave again?). This argument is used to
tell the function if a new trip should be started after the gap (the default = TRUE), or
if we want to include the time away from the colony after the gap as the same trip - i.e. should
gaps be known and potentially small enough to allow that choice - it is up to the user.}

\item{Flag_options}{One of two options - \code{maximal} or \code{minimal} - can be selected in this argument to be used alongside
methods \code{rect}, \code{circ} or \code{shape} methods (see above); (1) for the
\code{maximal} option, points that are outside the shape but "flagged" by the
additional \code{Flag} column as at the central place, are thus taken as at the central place,
and points that are inside the shape are always taken as colony, even if the \code{Flag}
column suggest they are not; (2) for the \code{minimal} option, only cases where both
the \code{Flag} and the overlap with the shape via \code{rect}, \code{circ} or \code{shape} methods
match, are taken as being inside the colony - hence a point can be within the shape but
not flagged and so becomes marked as NOT at the central place even if inside the shape,
or outside the shape, if "flagged" as at the central place will still be marked as on a trip.}

\item{trip_lab_noend}{There may be instances where you want to label incomplete trips not returning to the
central place at the end of the dataset as a trip. Set this parameter to TRUE will do that, default FALSE.}

\item{trip_lab_nostart}{There may be instances where you want to label incomplete trips at the start returning
to the central at the start of the dataset as a trip. Set this parameter to TRUE will do that, default FALSE. Note,
however this will classify for example all non-breeding data as a trip if the dataset if monitoring is throughout the year.}

\item{tripcon_sten}{logical defaulting to TRUE for whether the data should be assigned "trips" for the
very start and end of the data - situations can arise where you can read in data before an animal
is at a central place, which without setting this to TRUE, would then code "trips" for those periods
before it arrived to the central place and after it left; that may be needed if you are SURE the
data are for the breeding season, but then the trips would be incomplete anyway. If used properly, setting this is TRUE
also allows the define_trips function to essentially tell you when the first real time the bird was at the
central place by the start time of the first trip and end time of the last.}

\item{p4s}{A numeric or \code{sf} \code{CRS} argument, here defaulting to epsg:3035 (NW Europe). This is used in projecting
the supplied \code{WGS84} \code{lls} argument for code{rect} and \code{circ} methods, and for projecting the \code{sf}
object supplied for the \code{shepe} method.}

\item{verbose}{logical (default TRUE) for whether detailed messaging is required.}

\item{trip_methods}{Either \code{"new"} or \code{"old"} character string, defaults to \code{"new"}, giving available a
deprecated older method doing essentially the same process as the new option with less efficient code.}

\item{plot}{logical, defaults to FALSE, but if TRUE provides a plot of the shape used and the
points inside or outside the shape for which trips are based (useful for comparing different
trip classification systems).}
}
\value{
The function returns a tibble format with an additional \code{Track} class
with with additional columns of: \emph{Col}, a binary 1 or 0 for whether the positional fix
was identified within the chosen central place area or outside a trip; and \emph{tripNo}, a column of numeric
integer values delineating sequentially ordered trips for each individual TagID based on the options chosen.
A value of zero is returned for animals inside the defined central place area.
}
\description{
\code{define_trips} adds a further column to the tracking dataset containing a numbered
integer representing sequential trips/visits within the data, to and from a defined central place.
}
\details{
For studies focused on the breeding season of animals, and where study species adopt
central place foraging activities, it is common for tracking studies to ask questions
such as how far did individuals travel or how long did they spend, on their excursions. A first
step in answering those questions is to label positional fixes as "on a trip" or "at the colony"
and number them accordingly for further analysis. That is the main purpose of \code{define_trips}.

In the case of birds, a central place is of course at the finest scale, the individual nest,
or local territory, but, particularly for colonial species, this definition may need expansion to a wider
area, such as a colony, or wider area over which animals may start and end trips.
\code{define_trips} provides functionality to compute trips based on a predefined
area - here coded in the form of a rectangle, circle, GIS polygon using \code{sf} \code{POLGON} feature geometry,
but further flexibility is introduced to allow a separated \code{flag} column identifying
any means the user may have of distinguishing time at the central place or away on trips.
Further R packages may also be of interest to identify the nest location of individual animals,
including \code{trip} (Sumner et al. 2009, Sumner 2011),
\code{recurse} (Bracis et al. 2018), and \code{nestR} (Picardi et al. 2020) - see also \code{ExMove} for
a similar workflow.

A small but important detail about the \code{define_trips} function: animals may
have a tendency to arrive back from a trip, and then potentially immediately depart again, thus sharing a start and end time.
This may be due to how the central place is defined, and/or the sampling rate of the tags.
Thus, for further estimation of trip statistics through the further function \code{trip_stats},
the process in \code{MoveRakeR} is to ensure all tripNos have a start and end, and where that
arrive-re-depart situation above arises, \code{define_trips} creates duplicate extra rows for the trip with
all other data (other than TagID, DateTime, longitude and latitude) set to NA. This allows all trips
have start and end times even those that share a DateTime at a start or end.
These duplicate rows are not stored in the main Track dataset the function ingests. Instead, the
extra rows are stored as an attribute to the output: as \code{attr(attr(data, 'define_trips'), 'extra_rows')}.
This avoids potential issues for analyses downstream that require unique datetimes, such as KDEs, HMMs etc.
They can also be dropped again here through the argument \code{keep_extra_row}. There is a catch here though, as
\strong{some base R operations will remove data object attributes}. This means there is a risk that \code{trip_stats} will not find such extra rows causing an
error to be returned from that function. To avoid this, if you are are planning on manipulating the Track data returned from
\code{define_trips}, e.g. sub-setting, converting to data.frames, cbinding, manipulating data to and from \code{sf} classes, etc, it
is best to \strong{bring the extra rows directly into the Track dataset} after \code{define_trips} has been run,
i.e. rather than rely on the attribute returned from \code{define_trips}. This is achieved through
further convenience functions: \code{add_cag_trips}, standing for add 'come-and-go' duplicate trip row data. See information there
for how to use those functions.

A separate function \code{make_shape} can be used to replicate the circle or rectangle
as a separate shape for further use, for example in plotting with \code{plot_leaflet} using
the \emph{shapes} argument.
}
\examples{

# -------------------------------------------------------------------------- #
# Make sure columns of bird id, date-time, longitude and latitude are called:
# TagID, DateTime, longitude, and latitude, respectively and then use

indata <- yourdata # data.frame with a minimum of columns named TagID, DateTime, longitude, latitude
data <- Track(indata) # optional to convert to in-house class (most functions will still run on non track data but generic S3 methods will not be available for plot and summary)

## Defining trips based on rectangle around Walney LBBG colony, using a new projection,
## Lamert Aziimuth Equal Area centred on the colony
ColLon = -3.185
ColLat = 54.045

# sp to sf transition: Although not receommended to use +proj notation - is there another way of setting specific coordinates in a Lambert EA? Not sure
p4 <- sf::st_crs((paste("+proj=laea +lon_0=", ColLon," +lat_0=", ColLat, " +units=m", sep="")))

# or can e.g. specify an epsg number or any sf crs for that matter
# p4 <- 3035

#' # ----------------------------- #
# Set up a four-length vector lat-long bound for a rectangle of colony
#' # ----------------------------- #
LLS <- c(-3.2, 54.0553,-3.1689, 54.0437)

# simple definition of trips using a basic rectangle around the site
data_rect <- define_trips(data = indata, method="rect", lls = LLS, p4s = p4)

# ----------------------------- #
# simple circle of 1000 m radius
# ----------------------------- #
LLS <- c(-3.2, 54.0553)
data_circ <- define_trips(data = indata, method="circ", lls = LLS, p4s = p4)

# check in local shiny app:
plot_leaflet_trips(data_circ)

# ----------------------------- #
### Loading in a kml file for a shape
# ----------------------------- #
path_dir = "DIR"
path_nm <- "XXX.kml"

shp_in <- sf::st_read(paste0(path_dir, path_nm))
kml = as.data.frame(sf::st_coordinates(shp_in))

# make sf POLYGON, ideally should be dealt with in the function but like this for now
poly <- sfheaders::sf_polygon(obj = kml, x = "X", y = "Y")
poly = sf::st_set_crs(poly, 4326)

# then defining trips by this shape
data_shape <- define_trips(data = data, method = "shape", plot=TRUE, lls = poly, p4s = 27700)

###### testing the two halves of define_trips()

data_1st <- data \%>\% define_trips(GIS = TRUE, definetrips = FALSE,
                                  method="rect", lls = c(-3.2, 54.0553,-3.1689, 54.0437), p4s = p4) # add trips

# note we have no boot variable, so a warning will be returned
data_2nd <- data_1st \%>\% define_trips(by = "boot", GIS = FALSE, definetrips = TRUE,
                                      birdyear = TRUE,
                                       method="rect", lls = c(-3.2, 54.0553,-3.1689, 54.0437), p4s = p4) # add trips

### Should you wish to substantially manipulate the output from define_trips() prior to using trip_stats(),
### it is recommended to append the potential come-and-go trip duplicate records. Beware though, this
### adds duplicate row data to the Track object and so may need to be removed again prior to further analysis.

LLS <- c(-3.2, 54.0553)
data_circ <- define_trips(data = indata, method="circ", lls = LLS, p4s = p4) \%>\%
  add_cag_trips() # this will add duplicate rows using  column "extra_row" 1 or 0.

### other potential data manipulation e.g.
data_circ <- data.frame(data_circ) # removes any attributes!

# Then run trip_stats()
eg <- trip_stats(data_circ)

# put the extra rows back as an attribute
data_circ <- Track(data_circ)
data_circ <- reset_cag_trips(data_circ)

################### END EXAMPLES ##################

}
\references{
Bracis, C., Bildstein, K.L. & Mueller, T. (2018) recurse Revisitation analysis uncovers
spatio‐temporal patterns in animal movement data.\emph{Ecography}, \strong{41}, 1801-1811.

Langley, L.P., Lang, S.D.J., Ozsanlav-Harris, L., Trevail, A.M. (2024) ExMove: An open-source toolkit for
processing and exploring animal-tracking data in R. Journal of Animal Ecology, 93(7), 784-795.

Picardi, S., Smith, B.J., Boone, M.E., Frederick, P.C., Cecere, J.G.,
Rubolini, D., Serra, L., Pirrello, S., Borkhataria, R.R. & Basille, M. (2020)
Analysis of movement recursions to detect reproductive events and estimate their fate
in central place foragers Movement Ecology \url{https://doi.org/10.1101/562025}.
Sumner, M.D. (2011). The Tag Location Problem. Ph.D. thesis, University of
Tasmania. \url{https://eprints.utas.edu.au/12273/3/sumner.pdf}.

Sumner, M.D., Wotherspoon, S.J. & Hindell, M.A. (2009). Bayesian estimation of animal
movement from archival and satellite tags. \emph{PLoS ONE}, \strong{4}(10).
\url{http://dx.plos.org/10.1371/journal.pone.0007324}.
}
\seealso{
\link{clean_GPS}, \link{trip_stats}, \link{add_cag_trips}
}
