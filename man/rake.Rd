% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rake.R
\name{rake}
\alias{rake}
\alias{rule_centre}
\title{Overarching assessment of data quality}
\usage{
rake(
  data,
  check_for = c("spans", "NAlatlong", "dupDT", "timeline", "rates", "nsats"),
  xra = c(-10, 5),
  yra = c(25, 65),
  dates = c("2014-01-01 00:00:01", "2021-12-31 23:59:59"),
  buffer_days = 2,
  max_show = 3,
  plot = FALSE,
  return_plot = TRUE,
  overlaps = TRUE,
  active_thresh = 0.5,
  alone_thresh = 0.5,
  miss_thresh = 0.25,
  breaks = c(1, 60, 100, 300, 600, 900, 1200, 1800, 3600, 7200, 10800),
  tol = c(0, 0.5, rep(0.4, 2), rep(0.3, 5), rep(0.2, 2)),
  pctn_rate_thresh = 20,
  sat_col = "satellites_used",
  drop_sats = 3,
  messages = TRUE,
  msg_col = c(32, 33, 34, 35, 36, 37)
)

rule_centre(text = "", col = "35", char = "-")
}
\arguments{
\item{data}{Input data object, with required columns: TagID, DateTime, longitude, latitude.}

\item{check_for}{One of six options as noted in details for "spans", "NAlatlong", "dupDT", "timeline", "rates", "nsats",}

\item{xra}{From \code{tag_spans}: The expected limits of acceptable data in the x longitude dimension (WGS84),
supplied as a two-length vector c(min,max), c(-10,5).}

\item{yra}{From \code{tag_spans}: The expected limits of acceptable data in the y latitude dimension (WGS84),
supplied as a two-length vector c(min,max), defaulting to c(25,65).}

\item{dates}{From \code{tag_spans}: The expected valid range of dates over which the dataset was collected, supplied as a
two-length vector c(min,max) as character YYYY-MM-DD HH:MM:SS format, defaulting to c("2014-01-01 00:00:01", "2021-12-31 23:59:59").}

\item{buffer_days}{From \code{tag_spans}: A buffer in days for flagging dates as a temporal flag either side of the 'dates' time window.}

\item{max_show}{The maximum number of individual animals to show in the messaging print out.}

\item{plot}{From \code{tag_timeline}: A TRUE/FALSE (defaulting to FALSE) whether to plot a ggplot visualisation of daily tracking
intensity upon function completion.}

\item{return_plot}{From \code{tag_timeline}: A TRUE/FALSE (defaulting to TRUE) as to whether to return the ggplot visualisation of daily tracking
intensity, regardless of whether the user wanted it plotted to the R session on function completion. If TRUE,
the plot is given in the returned object: attr(, "plot").}

\item{overlaps}{From \code{tag_timeline}: A TRUE/FALSE whether to compute overlap data between individual animals, defaults to TRUE.}

\item{active_thresh}{From \code{tag_timeline}: a continuous numeric value between 0 and 1 used to quantify which animals were present when
less than (active_thresh*100)\% of other animals were active.}

\item{alone_thresh}{From \code{tag_timeline}: a continuous numeric value between 0 1nd 1 used quantify which animals had more
than (alone_thresh*100)\% time tracked alone.}

\item{miss_thresh}{From \code{tag_timeline}: a continuous numeric value between 0 and 1 to determine which animals had more
than (miss_thresh*100)\% days with missing data.}

\item{breaks}{As in \code{assign_rates2}: A vector of binned choices of potential rates: the default here is for 11 categories:
10, 120, 300, 600, 900, 1200, 1800, 3600, 7200 and 10800s, and the upper value beyond,
labelled as <max dt. This function operates independent of and gapsecs that may have been
chosen in \code{gap_section}, i.e. dts are assessed consecutively regardless of gaps, unless
supplied specifically within the by argument.}

\item{tol}{As in \code{assign_rates2}: A vector of tolerances that are added to the breaks argument to account for
imperfect GPS sampling rates in data obtained; this is set to: c(0,0.5,rep(0.4,2),rep(0.3,5),rep(0.2,2)).
The tol argument can also be a single vector that is then applied equally to all break categories.}

\item{pctn_rate_thresh}{From \code{assign_rates2}:The percentage value threshold above which assessment for data collection at coarser
or finer sampling rates is presented in the messaged outputs, e.g. For animal(s) X and Y: Z\% or more data was collected at coarser/finer rates of 'S' s.}

\item{sat_col}{The column for which to use for assessing satellite data quality, defaulting to "satellites_used".}

\item{drop_sats}{The minimum number of satellites present in the data, defaulting to 3.}

\item{messages}{Whether printed console messages are to be returned to the user, a Boolean defaulting to TRUE.}

\item{msg_col}{A concatenated vector for colours wanted in the messaged output per
data query, defaulting to:  c(32,33,34,35,36,37).}
}
\value{
The \code{rake} function returns a listed object of maximum length = 6, depending on the \emph{check_for} argument.
Each element relates to the \emph{check_for} options for each separate data query. Outputs of the functions
\code{tag_timeline}, \code{tag_spans} and \code{assign_rates2} are directly given in their respective list slots,
with their options in \code{rake} reflected in their structured outputs - see each function for more details.
For the 'NAlatlong' list element, this is simply a tibble summary of TagID, whether any missing data was detected ('any_missing'),
the number of missing data ('n_missing') and the respective DateTimes for those missing data ('missing_times'). Similarly,
for the 'dupDT' check_for, the output is a separate tibble, with, TagID, any_dupDT (TRUE/FALSE), dupDT (the actual DateTimes), and n_dupDT (how many duplicates per TagID).
For 'nsats' the output is similar again, with columns denoting any TagIDs that had missing satellite information,
and respective DateTimes, and further if any cells were found with satellites less than then minimum as input into the function, agai with the DateTimes for those records.
}
\description{
A general 'rake' of the data to assess quality of data using several queries of data structure
}
\details{
This overarching \code{rake} function is an initial assessment of the overall quality of the data structure
made by using broad queries relating to: (1) the data quality in space and time extents ('spans'), (2) whether
any missing (NA) data are present in latitude or longitude columns ('NAlatlong'), (3) whether any duplicate DateTime records exist ('dupDT'),
(4) an assessment of animal tracking durations and density over overlaps among the data over days (timeline'), (5) the
likely rates of GPS sampling schedules and potentially missing data ('rates'), and (6) a quick appraisal of number of satellites
and missing (NA) satellite data ('nsats').

While the \code{rake_outlie} function is concerned with identifying outlying for integer and numeric covariates,
for example relating to measurement error, the \code{rake} function provides a further summary output relating
to potential sampling biases inherent in the data for individual animals.
The \code{rake} function uses the function \code{tag_timeline} to return the information about the temporal schedule
of the tags and overlaps of the data, \code{tag_spans} to determine spatio-temporal extents and
potential fixes errant outside user-provided bounds, and \code{assign_rates2} to query the likely sampling rates present.
However, the \code{rake} function also considers some measurement
error aspects such as duplicate DateTimes, missing latitude/longitude information, and number of satellites.
Each of the above functions used by \code{rake} can also be used on their own. As noted, the xra and yra arguments
are only a guide of what you may expect to be incorrect and is a simplistic first pass of the data.

The \code{ShinyRakeR} interactive Shiny app can be used to flag potential outlying data points, and also uses some process
within \code{Rake} such as \code{tag_timeline} for a more interactive experience.
}
\examples{

indata = yourdata # data.frame with a minimum of columns named TagID, DateTime, longitude, latitude
data = Track(indata) # optional to convert to in-house class (most functions will still run on non track data but generic S3 methods will not be available for plot and summary)

# add in some random fake NA longs and NA lats if you have none just to see what happens in messaging:
data_fake = data
data_fake$latitude[sample(seq(1,nrow(data_fake),1),100, replace = FALSE)] <- NA
data_fake$longitude[sample(seq(1,nrow(data_fake),1),50, replace = FALSE)] <- NA

# duplicate some rows
a = data_fake[sample(seq(1,nrow(data_fake),1),25, replace = FALSE),]
data_fake = rbind(data_fake,a) \%>\% arrange(TagID,DateTime)

# all with defaults
rake_all = rake(data_fake, check_for = c("spans", "NAlatlong", "dupDT", "timeline", "rates", "nsats"),
           msg_col = c(32,33,34,35,36,37))

# spans only
rake_spans = rake(data_fake, check_for = c("spans"),
           xra = c(-10,5), # the expected likely longitudinal distribution range
           yra = c(25,65), # the expected likely latitudinal distribution range
           dates = c("2014-01-01 00:00:01", "2021-12-31 23:59:59"),
           buffer_days = 2, max_show = 3,
           msg_col =32)

# or just using the tag_spans() function
dat <- tag_spans(data_fake, measure = c("spatial", "temporal"),
    msg_col = 33,
    xra = c(-10,5), yra = c(25,65), max_show = 3,
    dates = c("2014-01-01 00:00:01", "2021-12-31 23:59:59"), buffer_days = 2,
    messages = FALSE)


# NAlatlongs and "dupDT"
rake_ll_dt = rake(data_fake, check_for = c("NAlatlong", "dupDT"),
                 max_show = 3,
                 msg_col = c(33,34))

# timeline
rake_time_line = rake(data_fake, check_for = c("timeline"), msg_col = 35,
                     plot = FALSE, # tag_timeline() plot option
                     return_plot = TRUE,
                     overlaps = TRUE,
                     active_thresh = 0.55,
                     max_show = 3,
                     alone_thresh = 0.05,
                     miss_thresh = 0.55)

# or just call tag_timeline()
rake_time_line = tag_timeline(data_fake,
    plot = FALSE,
    return_plot = TRUE,
    overlaps = TRUE,
    active_thresh = 0.5,
    alone_thresh = 0.5,
    miss_thresh = 0.25,
    msg_col = "35")

# rates
rake_rates = rake(data_fake, check_for = c("rates"),
                  breaks = c(1, 60, 100, 300, 600, 900, 1200, 1800, 3600, 7200, 10800, 18000),
                  tol = c(0,0.5,rep(0.4,2),rep(0.3,5),rep(0.2,3)),
                  pctn_rate_thresh = 20,
                  msg_col = 36)

}
\seealso{
\link{rake_outlie}, \link{ShinyRakeR}, \link{tag_timeline}, \link{tag_spans}, \link{assign_rates2}
}
