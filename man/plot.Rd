% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_track.R
\name{plot.Track}
\alias{plot.Track}
\title{Produce spatial visualisations of tracking data}
\usage{
\method{plot}{Track}(
  data,
  gap = FALSE,
  Points = TRUE,
  arrows = FALSE,
  corr_size_arr = 0.35,
  N_keep = NULL,
  sta = TRUE,
  end = TRUE,
  maxdists = TRUE,
  maxdist_trip = FALSE,
  Lines = TRUE,
  Legend = FALSE,
  Xlim = NULL,
  Ylim = NULL,
  cex_p = 0.4,
  cex_leg = 1,
  leg_pos = "topright",
  pcol = NULL,
  Lwd = 1,
  ADD = FALSE,
  col = NULL,
  anims = NULL,
  CombStackTagID = FALSE,
  SameColAcrossStacks = FALSE,
  verbose = TRUE,
  p4s = 4326
)
}
\arguments{
\item{data}{A \code{Track-family}, object, one of, \code{Track}, \code{TrackStack} or \code{TrackMultiStack} object.}

\item{gap}{Logical (defaulting to FALSE) should gapsections in the \code{"gapsec"} column be used for line-plotting;
this requires gapsections to  have been identified e.g. through \code{clean.GPS}
or \code{gap.section}, and the function will only plot lines of consecutive fixes within
your chosen gap boundary, i.e. to avoid plotting lines across space joining fixes you don't want to.}

\item{Points}{Logical (default TRUE) as to whether points are to be plotted on the map}

\item{arrows}{Logical defaults to FALSE, as to whether directional arrows are desired,
calls separate function \code{plot_track_arrows}.}

\item{corr_size_arr}{See \code{plot_track_arrows} for details of this parameter;
controls the size of the arrow length based on the extent of animals, default 0.35.}

\item{N_keep}{See \code{plot_track_arrows} for details; \emph{WARNING: not currently implemented};
should control the number of arrows to plot, but here is NULL meaning an automatic calculation is made per animal.
For more flexibility on this, use the \code{plot_Track_arrows} outside the main plotting function.}

\item{sta}{Logical (default TRUE) for ploting a triangle for the start location of animal(s).}

\item{end}{Logical (default TRUE) for ploting an upside-down triangle for the end location of animal(s).}

\item{maxdists}{Logical (default TRUE) for plotting maximum distance points of animal(s) as a square.}

\item{maxdist_trip}{Logical (default FALSE) for plotting small squares at the distal point (max distance from the start location)
for animal(s); only works of a column called "tripNo" is found in the data.}

\item{Lines}{Logical (defaulting to TRUE) as whether lines are to be plotted on the map.}

\item{Legend}{Logical (defaulting to FALSE) should a legend be added to the plot. Note, this argument
offers only basic line, point colouration and cex options for the legend for individual animal IDs. Should the user
want anything extra or more bespoke, then set this to FALSE and apply your own after the function has plotted.}

\item{Xlim}{The numeric x range of the plotting extent as a concatenated string, that can be a user-fed value or
here suggested making use of the \code{get_bounds} function to assess the range of individual
groups of animals. Defaults to range of data.}

\item{Ylim}{As above, the numeric y range of the plotting extent, defaults to range of data.
Note if ADD=FALSE, the map upon which lines and points are plotted overrides any x and y ranges set.}

\item{cex_p}{Numeric \code{par(cex)} value for the point size, set to 0.4 by default.}

\item{cex_leg}{Numeric \code{par(cex)} value for the legend size, set to 1 by default.}

\item{leg_pos}{Vector of four options to feed the legend argument: "topright", "topleft", "bottomright", "bottomleft",
set to "topright" as default.}

\item{pcol}{Option for a specific \emph{point} colour as a single colour argument, to overide
any option in argument in \code{col} - i.e. should the user want coloured lines per animal
but a specific single colour for points; note only one colour is allowed in this argument.}

\item{Lwd}{Numeric \code{par} value for the line width defaulting to 1.}

\item{ADD}{Logical (defaulting to FALSE) to add the lines/points for the current
plot onto an existing graphic already loaded in the plot window. This enables base maps of the user to be loaded
so the function is not proscriptive in requiring base mapping first.}

\item{col}{The colour palette to use for the plotting, defaulting to an errant "NULL".
\code{col} can be a colour palette function such as \code{grDevices::colorRampPalette}, for which
the number of animals in the \code{Track family} of objects is first assessed and then used to plot.
Alternatively, the user can specify a vector of colours, e.g. \code{c("red", "blue", ...)}
but this must match the length of the number of animals being plotted, with the exception of a single colour that
can be supplied and this will be taken to colour all the animals in the object the same.}

\item{anims}{A value specific to \code{TrackMultiStack} objects, defaulting to NULL (but requires a specification for TMS objects).
This argument must be one of \code{"uniq"} or \code{"stack"} and determines how animals in
the component tracks in the Stacks of the MultiStack object will be plotted. \code{"uniq"} indicates a separate colour
is required for every animal across all stacks, with further TMS argument \code{"SameColAcrossStacks"} used
to determine if the same animal IDs in different stacks should be coloured the same. The \code{"stack"} option
expects a colour of length the same as the number of stacks of animals, and permits
colouring all animals in the individual stack the same, but each stack to then be coloured differently.}

\item{CombStackTagID}{Logical (defaulting to FALSE) as to whether individual animal TagIDs should
be coloured the same within Tracks and TrackStack objects.}

\item{SameColAcrossStacks}{As noted above, the \code{anims} argument \code{"uniq"} can accept specific treatment
to colour TagIDs the same across different TrackStack objects in the multistack configuration. This option thus reduces the number
of colours used, so the colour-palette will be adjusted to the reduced number automatically, i.e. should say
six individual Track elements (in stacks) become five if one TagID is the same. Similarly, the first
five colours of a fixed colour list in the \code{col} argument will be taken should more have been specified.}

\item{verbose}{logical defaulting to TRUE for detailed messaging.}

\item{p4s}{A numeric or \code{sf} \code{CRS} argument, here defaulting to the UTM 31N (32631).}
}
\value{
A plotted surface in an open window, but that can be part of code by the user to export to external
graphics devices such as png, jpeg etc.
}
\description{
A generic plotting function \code{plot} available as an S3 method for \code{Track} objects
of class \code{Track}, \code{TrackStack} or \code{TrackMultiStack}
}
\details{
This \code{plot} function can help with generic plotting covering a range of complexities. The function uses base graphics, with outputs depending
on the user's choice. Lines, points or lines+points options are available, with options
for colouration of points and lines based on a colour palette or specific vectors of colours.
The function is also compatible with migration datasets, independent of trip analysis. Through use of
the \code{"ADD"} argument, the user can load in any shapefile they wish to then plot points/lines over.
Options also exist to colour individuals the same colour in repeated TrackStacks in a TrackMultiStack
and it is suggested the user use the in-built functions should they need to subset particular animals/groups
a priori.

The user can also plot arrows in the plotting function via
a call to the standalone function \code{plot_track_arrows}. This adds a
series of arrows angles at 0.5 radians either sie of the direction of movement.
The angle and the number plotted here are fixed but further flexibility on both
of those elements are available in \code{plot_track_arrows}. The user can, however,
adjust the size of the arrows directly in the plot main function here, via use of
the \emph{corr_size_arr} argument, which is based on the extent of the suited of animals
plotted. Arrows are automatically coloured the same as the Track lines.
}
\examples{

indata <- yourdata # data.frame with a minimum of columns named TagID, DateTime, longitude, latitude
indata <- Track(indata) # optional to convert to in-house class (most functions will still run on non track data but generic S3 methods will not be available for plot and summary)
p4 <- 3035

# With a very basic rectangle around the colony for trips
indata <- indata \%>\% clean_GPS() \%>\%
  define_trips(method="rect", plot=TRUE,lls = c(-3.2, 54.0553,-3.1689, 54.0437), p4s = p4)

### European shape as an example
# R packages not bundled with MoveRakeR
#remotes::install_github("ropensci/rnaturalearthhires")
#install.packages('rnaturalearth')
library(rnaturalearthhires)
library(rnaturalearth)

spdf_world <- ne_download(scale = 10, type = "countries")
Europe <- spdf_world[spdf_world$SUBREGION \%in\% c("Western Europe","Eastern Europe","Northern Europe","Southern Europe"),]
Europe_sf = st_crop(Europe, xmin = -25, ymin=32, xmax=35, ymax=70)
Europe_sf <- sf::st_transform(Europe_sf, p4)
plot(Europe_sf$geometry)

## colour ramp
Cpal <- grDevices::colorRampPalette(c("red", "green", "blue"))

# Mostly the user will be concerned with a single data.frame tibble of many animals - these
# are Track classes. If any listing is used to separate out animals in a list (TrackStack) or
# further mult-listing (TrackMultiStack), then the plot S3 generic can handle those other formats - see below examples.

#############
# TRACK OBJECTS
# plotting as a palette
# NOT RUN
xRa = c(minx, maxx) # define bounds perhaps
yRa = c(miny, maxy)

plot(Europe_sf$geometry, xlim=xRa, ylim=yRa,col="wheat")
plot(indata,ADD=TRUE,col = Cpal, p4s = p4, Legend = TRUE)

# OR as defined colours of your own
plot(Europe_sf$geometry, xlim=xRa, ylim=yRa,col="wheat")
plot(indata,ADD=TRUE,col = c("blue"), p4s = p4)

# ADD TRACK ARROS:

plot(indata, ADD=FALSE, anims = "uniq", arrows = TRUE, Points = TRUE, corr_size_arr = 0.38)

##############
# TRACKSTACK OBJECTS (e.g. first [[stack]] in the TMS)
# plotting as a palette and plotting the first TrackStack object of the TMS object

plot(Europe_sf$geometry, xlim=xRa, ylim=yRa,col="wheat")
plot(indata_stack,ADD=TRUE,col = Cpal, p4s = p4, Legend = TRUE)

plot(indata_stack,ADD=FALSE,col = Cpal, p4s = 27700)

plot(Europe_sf$geometry, xlim=xRa, ylim=yRa,col="wheat")
plot(indata_stack,ADD=TRUE,col = c("red","royalblue","orange","yellow"), p4s = p4)

############################
# TRACK MULTI STACK OBJECTS
### Stack option for two colours for two stacks, e.g. all animals grouped as one colour

plot(Europe_sf$geometry, xlim=xRa, ylim=yRa,col="wheat")
plot(indata_multi_stack,ADD=TRUE,col = Cpal, anims = "stack", p4s = p4)

# or feeding in direct colours
plot(indata_multi_stack,ADD=TRUE,col = c("red","blue"), anims = "stack", p4s = p4)

# if one colour provided, all animals coloured the same
plot(indata_multi_stack,ADD=TRUE,col = "red", anims = "stack", p4s = p4)

### Unique option
plot(Europe_sf$geometry, xlim=xRa, ylim=yRa,col="wheat")
plot(indata_multi_stack,ADD=TRUE,col = Cpal, anims = "uniq", p4s = p4)

# separate colour option must match length of birds summed across both stacks
# function works out division of colours by bird numbers in each stack

# again one colour just colours all
plot(indata_multi_stack,ADD=TRUE,col = "red", anims = "uniq", p4s = p4)

# plotting the same colours for individual animals in different stacks
# this is done in the function by the term: SameColAcrossStacks = TRUE
# Also there is an option to combine animals within a stack

# Keeping the animal as separate colours in the two stacks
plot(ukmap$geometry, xlim=lls$xRa, ylim=lls$yRa,col="wheat")
plot(indata_multi_stack,ADD=TRUE,col = Cpal, anims = "uniq", SameColAcrossStacks = FALSE, p4s = p4)

# or...same colours across stacks
plot(Europe_sf$geometry, xlim=xRa, ylim=yRa,col="wheat")
plot(indata_multi_stack,ADD=TRUE,col = Cpal, anims = "uniq", SameColAcrossStacks = TRUE, p4s = p4)

# Not currently possible to separate out arrow colours from point or line colours
# here; such flexibiliity can be got through separate use of the plot_track_arrows function.
# The arrow argument defaults to FALSE so need to turn back on. Control
# also available for size of arrow across the Track via the "corr_size_arr" argument,
# but any further use of number of arrow or the angle of the arrow use the
# plot_track_arrows function directly after calling plot. Or ask the Developer if that's not good enough.

############################ END ###########################

}
\seealso{
\link{plot_track_arrows}
}
