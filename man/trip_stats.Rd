% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trip_stats.R
\name{trip_stats}
\alias{trip_stats}
\title{Compute trip statistics of animals from a central place}
\usage{
trip_stats(
  data,
  Phase = "br",
  use_current_by = FALSE,
  by = NULL,
  nestfile = NULL,
  nest_lls = NULL,
  use_shape = FALSE,
  dist2Coast = TRUE,
  dist2colOff = TRUE,
  incompl_meth = "all",
  simple_output = TRUE,
  verbose = TRUE,
  p4s = 3035
)
}
\arguments{
\item{data}{Input data object, with required columns: TagID, DateTime, longitude, latitude.}

\item{Phase}{A two-letter character of wither \code{"br"} or \code{"wi"} for breeding or winter; essentially the code
is meant for breeding season usage, but should maximum distance (for example) be needed for
non-breeding movements, then a dummy "1" is inserted for trips and the function can be used to get that information.}

\item{use_current_by}{An option (logical default FALSE) to use the existing by variable structure in the data
but including TagID and year as the highest level grouping if not included and tripNo as the lowest.}

\item{by}{A by level grouping in the tbl structure over which to assess data by, default NULL. This is stricter than
e.g. \code{define_trips} as here the function always uses TagID, year, and tripNo to assess trip stats; the by
is for a further potential level after year.}

\item{nestfile}{The \code{trip_stats} function needs to know where to measure the
distance from, i.e. for the central place. The option exists here to feed in a control file to give exact
nest-specific information for individual birds, via the \code{nestfile} argument, which is in the format of a data.frame of:
TagID, longitude, latitude, and \strong{one nest coordinate per TagID}. Optionally a 'year' value can
be provided for example if nest locations for the same animal differ per year, forcing the function to assess
this within the telemetry data provided. A further option exists to provide the same information as nestfile
but in a listed format using the \code{nest_lls} argument - see below. The nestfile argument defaults to NULL.
Rather obviously, it is best if TagIDs are present in the nestfile and the telemetry data, but the function will
check for this - if TagIDs are missing from nestfile but are in the telemetry data, the missing IDs will be
taken as the \strong{mean} of the other nests provided. Any additional nests provided in nestfile that are not in the
telemetry data will be filtered out and not used. The same logic also applies to the nest_lls argument.}

\item{nest_lls}{A second way of providing nestfile inputs (akin to the \code{nestfile} argument) is provided, through the
\code{nest_lls} argument, which defaults to NULL. This statement is expected as a \code{list()} of the same structure as
\code{nestfile} being as: list(TagID = c(a,b,c), longitude = c(a,b,c), latitude =c(a,b,c)).
As with \code{nestfile} this allows matching of the TagIDs in data to the nest_lls
lookup. Also, \code{nest_lls} can accept a two-length vector of c(longitude,latitude)
should the user only want to calculate distance from a single point for all nests in \code{data}.
This is the only instance when a different length structure of the nest_lls argument is permitted, otherwise
the function will fall over if there is an imbalance in TagID, longitude and latitude (and year) lengths.
Finally, if \code{nest_lls} and \code{nestfile} are both NULL (and the use_shape argument is FALSE - see below), then the function
will assume the start latitude and longitude of the trip are desired to estimate foraging range.}

\item{use_shape}{A Boolean (defaults to FALSE) as to whether to look for a specified shape that was use
from the \code{define_trips()} function; if \code{use_shape} is specified as TRUE, then the function will
look for the shape used (stored under attributes of data) - if not found the function will return an error. If
the shape is found, the centroid of this shape will be taken as the central place.}

\item{dist2Coast}{logical defaults to TRUE for whether metrics for distance to coast are to be returned; see details
for more information on data returned. Note, the metrics will be returned only if the relevant dist2coast
column(s) exist having been generated by function \code{\link{dist2coast}}.}

\item{incompl_meth}{Character vector with two options of "all" or "part" for the complex, and often subjective
definition of what constitutes an \strong{incomplete trip}. For "all" this is for whether any trip contains an identified gap between fixes
either during or at the start/end of a trip, but "part" only flags incomplete trips if during the trip (i.e. not right at the start or end)
there is a clear temporal split between fixes; thus the first "all" method (default) is stricter and
for instance if there is a gap AFTER the trip to the next point, then this will get labelled as incomplete
even through perhaps the animal could have been very near to the central place. Without examining every instance graphically
this is the best we can do. It may be that the user will want to alter this definition manually.}

\item{simple_output}{Logical for if simple output removing calculation of max lat longs and N fixes
in offshore or onshore environments and for dist2coast; irrelevant if offshore or dist2coast elements are not used.
Also removes max lat long fix point information for offshore/onshore and distance to coast summaries.}

\item{verbose}{Logical should detailed trip counting be displayed, defaults to TRUE.}

\item{distcolOff}{logical defaults to TRUE for whether metrics for distance reached per tip offshore
are to be returned; see details for more information on the metrics. Note, the metrics will only
be returned if the relevant \code{offshore} column has been generated from function \code{\link{offshore}}.}
}
\value{
An objects of class \code{\link{Trip}}. The output
is in the form of a \code{tibble} per listed level, with one dataset per animal.
In each, the layout is the same with the following variables for: The trip number of the animal
\code{"tripNo"}, the maximum distance reached (km) per trip \code{DistMax}, the total distance travelled
(km) per trip \code{DistTotal}, the bearing at the distal point  \code{BearMax}, the DateTime UTC
start time \code{Start}, the UTC end time \code{End}, the 'total' duration of the trip (hours),
\code{TripDur}, the duration of monitoring from start to end of min and max trips \code{TotalMon} in hours,
the 'active' monitoring of the trips in hours i.e. without "gaps" as determined by the users gapsec
selection \code{ActiveMon}, the nest location longitude \code{nestlong} and latitude \code{nestlat} used
for start points of distance calculations, whether the trip was flagged as "incomplete" by containing
changes in gapsections \code{incompl}, and the \code{TagID} of the animal.
Further optional columns can be returned for distance to colony offshore - see \code{distcolOff} argument, and
distance to coast selection - see \code{dist2Coast} argument. These options return up to a a further
17 extra columns for the maximum distance (km), mean distance (km) standard deviation and number of fixes for each
trip. For offshore distance per trip for example, columns of \code{DistMaxOff}, \code{DistMeanOff},
\code{DistSDOff} and \code{distNOff} are returned, with NAs if no points in the trip were noted as offshore, and
\code{DistalPointOff} indicates if the distal point was onshore or offshore as a binary 1 or 0.
For distance to coast, returned columns are first grouped by distance to coast for ALL telemetry fixes
i.e. onshore and offshore, using the column in the data \emph{"dist2coast"}, giving \code{DistCoastMaxOff},
and so forth in similar format to offshore above for mean, SD and N. Further split is then made for points onshore and offshore
for distance reached from the coast using either column \code{Dist2coast} as above, or should the user JUST
want offshore information, then the variable \code{dist2coast_off} is only used, as per choice made in
the \code{dist2coast} function - naming of the columns again follows the same max, mean, SD and N format as above.
Additional columns are also added if \code{max_pnt} is set to TRUE giving
\code{max_x}, \code{max_y}, and \code{n_max_xy} for xy long and lat for the distal point (first if more
than one per trip recorded at same distance) and indication
if more than one point per trip had the same max distance recorded.

The function \code{trip_stats} can also process additional \emph{distance (km)} metrics of trips for the maximum,
mean, SD and number of fixes per trip that are offshore, using the \code{"offshore"} column but only if it exists.
The offshore column can be added through the \code{\link{offshore}} function, and a warning is given if this is
requested to be processed (dist2colOff = TRUE) yet the column isn't found. Similarly, the
\code{trip_stats} also processes information on distance to coast, and again depends on an earlier function being run, this time
\code{\link{dist2coast}} being run in advance, to provide columns \code{"dist2coast_off"} or \code{"dist2coast"} depending
if only offshore distance to coast or both onshore and offshore are requested. As with offshore, the distance to coast
elements add additional columns to the outputted dataset for distance, including the max, mean, SD and number of fixes; for the variable
\code{"dist2coast"} complexity is also added by summarising max, mean, SD and N for all distances,
onshore AND offshore, thus adding 12 further columns to the Trip outputs. These options of offshore and
coast can be requested not to be processed even if they exist in the dataset by setting the
\code{dist2Coast} and \code{dist2colOff} arguments to FALSE.
}
\description{
\code{trip_stats} is the main workhorse function to produce trip statistics having first
run the function to define the trips: \code{\link{define_trips}}.
}
\details{
The \code{trip_stats} relies on specification of a central place to process individual trips and calculates the final statistics.
This CPF can either be per animal and year, fed through as a data.frame (nestfile argument) or a
listed option per animal (nest_lls argument), or as a simple two-length vector of long and lat (nest_lls). Otherwise,
the function can use a shape (use_shape argument) from that provided to \code{define_trips()} to estimate a centroid
long,lat that was used under that function. Finally, if none of those options are used, then the
start point of individual trips within the CPF are taken as the point to 'measure' against for trip stats.
The stats used here (not really "stats" but just a shorthand for metrics), are: \strong{trip duration},
\strong{max distance reached}, i.e. distance of the "distal point" and \strong{total distance travelled}.
Trip duration is simply taken as the end time of the trip minus the start time, with \emph{start} and
\emph{end} also included as a date-time output for each trip. Further, the \strong{bearings} of the
maximum point are also taken, and the mean bearing per trip is also provided. Further tortuosity measures are
not directly provided here but can be evaluated as the distal point lat long per trip is also provided.
}
\examples{

# Initial set up - requires initial cleaning steps run and define_trips for numbered trips
# based on central place

ColLon = -3.185
ColLat = 54.045
p4 <- sf::st_crs((paste("+proj=laea +lon_0=", ColLon," +lat_0=", ColLat, " +units=m", sep="")))
library(dplyr)
data <- get(load("Y:/R packages/BTOTTdata/data/LBBGWalB201416.RData"))
data <- TrackMultiStack2Track(data, rename = FALSE)
indata <- data \%>\% clean_GPS(speed_filt = TRUE, drop = FALSE) \%>\%
  define_trips(method="rect", lls = c(-3.2, 54.0553,-3.1689, 54.0437), p4s = p4)

######################
# OPTIONS DEPENDING ON HOW CP DEFINED
# 1 = Nestfile, overrides all else                                            nestfile not null
# 2 = nest_lls > 2 - individual TagID nest locations provided as data.frame   nest_lls = length > 2
# 3 = nest_lls == 2, i.e. one lat long across all nests                       nest_lls == length 2
# 4 = shape centroid calculated from storage in the define_trips function     shape = TRUE
# 5 = start point location of individual trips (DEFAULT)                      nestfile = NULL, nes_lls = NULL, even if shape = TRUE

# --------------------- #
# OPTION 1 and 2 - apologies these are the same
# --------------------- #
nest_df = get(load("Y:/R packages/BTOTTdata/data/GullNestLongLat.RData"))
# nest_df must be a data.frame() with TagID (any format), latitude (numeric) and longitude (numeric), and optionally year (integer),
# which will be looked for in data, e.g. different nest locations in different years

# this gives the same output
trip_test_1 <- trip_stats(indata, nestfile = nest_df)
trip_test_2 <- trip_stats(indata, nestfile = NULL, nest_lls=nest_df)

# another option providing listed formats if needed (year can be included too)
trip_test_2 <- trip_stats(indata, nestfile = NULL, nest_lls=list(TagID = c('1','2','3'), longitude = c(-3.188,-3.182,-3.182,-3.172,-3.172,-3.185), latitude =c(54.0466,54.0473,54.04723,54.05155,54.05189,54.06200)))

# --------------------- #
# OPTION 3
# --------------------- #
nest_lls = c(-3.18275, 54.04732)
trip_test_3 <- trip_stats(indata, nestfile = NULL, nest_lls=nest_lls)

# --------------------- #
# OPTION 4
# --------------------- #
# If a shape was used, the define_trips function also stores the central place in:
shape_used = attr(attr(indata, "define_trips"), "shape_used")

# this can be used for assessing the centroid automatically and working out trip_stats without further work
trip_test_4 <- trip_stats(indata, nestfile = NULL, nest_lls=NULL, use_shape = TRUE)

# --------------------- #
# OPTION 5
# --------------------- #
# It is also possible to supply NULL arguments to nestfile and nest_lls and shape = FALSE, and in that case the
# start point of individual trips is used as the geographic start point to measure foraging range per individual trip.
# This is important should the central place be large and precise start points be needed.

trip_test_5 <- trip_stats(indata, nestfile = NULL, nest_lls=NULL, use_shape = FALSE)

plot_leaflet_trips(data)


##### END EXAMPLES

}
\seealso{
\link{define_trips}, \link{dist2coast}, \link{offshore}
}
