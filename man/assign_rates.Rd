% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assign_rates.R
\name{assign_rates}
\alias{assign_rates}
\title{Estimate tag sampling rates of a Track-family object}
\usage{
assign_rates(
  data,
  by = NULL,
  split = TRUE,
  group_after_gap = FALSE,
  breaks = c(1, 60, 100, 300, 600, 900, 1200, 1800, 3600, 7200, 10800),
  tol = c(0, 0.5, rep(0.4, 2), rep(0.3, 5), rep(0.2, 2)),
  out = "summary"
)
}
\arguments{
\item{data}{Input data object, with required columns: TagID, DateTime, longitude, latitude.}

\item{by}{An optional by argument (default to NULL i.e. only assessing by TagID); can be entered as c(x,y,z)
for levels to be assessed in the data, e.g. by year (if year is selected and is not present in the data it
is automatically added); out="summary" reflects the by variable choice.}

\item{split}{logical defaulting to FALSE for whether a split tibble is returned by TagID and the other by variables.}

\item{group_after_gap}{logical defaulting to FALSE for whether to summarise over gapsections if supplied as a by variable.}

\item{breaks}{A vector of binned choices of potential rates: the default here is for 11 categories:
10, 120, 300, 600, 900, 1200, 1800, 3600, 7200 and 10800s, and the upper value beyond,
labelled as <max dt. This function operates independent of and gapsecs that may have been
chosen in \code{gap_section}, i.e. dts are assessed consecutively regardless of gaps, unless
supplied specifically within the by argument.}

\item{tol}{A vector of tolerances that are added to the breaks argument to account for
imperfect GPS sampling rates in data obtained; this is set to: c(0,0.5,rep(0.4,2),rep(0.3,5),rep(0.2,2)).
The tol argument can also be a single vector that is then applied equally to all break categories.}

\item{out}{By default the function outputs a \code{summary} count of fixes per TagID binned to the the
breaks chosen, and will result in a split tibble df per animal with start and end being the
breaks between subsequent categories and likely_rate = breaks. However, if out is \code{NULL}, then
the function will return the tibble with 'rate' added as a column to the data supplied.
The maximum category split will always be the maximum dt in the data with likely rate <max per animal.}
}
\value{
Depending on the selection of the out argument, either a tabulation of TagID, likely_rate, start, end (of the category range),
and N (the summed number of fixes per bin), or a tibble as supplied with an additional rate column for the breaks.

Note that if the max break selected is bigger than the max dt in the data, the behaviour
for category splits is currently to assess up to the max dts per bird within that upper category.
}
\description{
The function \code{assign_rates} assigns an approximate likely sampling rates of tags based on supplied
breaks in the data.
}
\details{
This function simply cuts the data via binned lower and upper bounds surrounding
the potential sampling rate (all rates given in seconds), with tolerance error
specified around the rates per break.
}
\examples{

# simple assignment of rates using the default option under breaks argument
assign_rates(data, out = "summary") # list of tibbles per animal
assign_rates(data, out = NULL) # returns original data with rate column added

assign_rates(data, breaks = c(1,60,300,900,1200), tol = 0.2, out = "summary")

assign_rates(data2, by = "year", split = FALSE)

# Note the totals per bird will always be n-1 total number of rows as cannot estimate dt from the last rows in the data by levels assessed

# Further consideration using gapsections
data <- data \%>\% gap_section2(GAP = 18000, tol = 0.1, drop = FALSE) # e.g. 5 hours instead of 8 default

assign_rates(data, split = FALSE) # no use of any groupings, dts assessed across any section be animal
assign_rates(data, by = c("year"), split = FALSE) # grouping by year, assessment still made across gapsections
assign_rates(data, by = c("year","gapsec"), split = FALSE) # use of gapsection, dts between gapsections become NAs and dropped
assign_rates(data, by = c("gapsec"), split = FALSE) # same as bove without year
assign_rates(data, by = c("year","gapsec"), split = FALSE, group_after_gap = TRUE) # grouping by year after first assessing by gapsection (i.e. removing large dts between gaps)


\dontrun{
### testing
data1 = data_in[data_in$TagID == "5377",]
data1 = data_in[data_in$TagID == "202",]
data2 <- data_in

data = data_in
breaks = c(1, 60, 100, 300, 600, 900, 1200, 1800, 3600, 7200, 10800)
tol = c(0,0.5,rep(0.4,2),rep(0.3,5),rep(0.2,2))

assign_rates(data2, by = "year", split = FALSE)

data <- data \%>\% gap_section2(GAP = 18000, tol = 0.1, drop = FALSE)
test = assign_rates(data, split = FALSE) # no use of any groupings, dts assessed across any section be animal
test2 = assign_rates(data, by = c("year"), split = FALSE) # grouping by year
assign_rates(data, by = c("year","gapsec"), split = FALSE) # use of gapsection, dts between gapsections become NAs and dropped
assign_rates(data, by = c("gapsec"), split = FALSE)
assign_rates(data, by = c("year","gapsec"), split = FALSE, group_after_gap = TRUE) # grouping by year after first assessing by gapsection (i.e. removing large dts between gaps)

by = "year"
by = "gapsec"

data = data_in
by = c("year", "gapsec")
}
}
\seealso{
\link{gap_section}
}
