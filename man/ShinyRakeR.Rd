% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ShinyRakeR.R
\name{ShinyRakeR}
\alias{ShinyRakeR}
\title{The MoveRakeR Shiny app}
\usage{
ShinyRakeR(
  data = NULL,
  dev = FALSE,
  launchBrowser = TRUE,
  Providers = c("OpenStreetMap", "GoogleEarth", "Esri.OceanBasemap", "Esri.WorldImagery")
)
}
\arguments{
\item{data}{Input data object, with required columns: TagID, DateTime, longitude, latitude. If no data are supplied
a fake dataset is automatically generated.}

\item{launchBrowser}{TRUE/FALSE (Default TRUE) whether to launch a browser window (preferred) otherwise a local
window will be used in RStudio, but app visual performance may then be sub-optimal.}

\item{Providers}{A list of providers to use in the base leaflet maps for options of swutching between
tiled layers; defaults to: c("OpenStreetMap", "GoogleEarth", "Esri.OceanBasemap", "Esri.WorldImagery").}
}
\description{
An interactive Shiny app to visualise and assess the impacts of potentially erroneous data over time
}
\details{
By running the \code{ShinyRakeR} command, this launches an interactive MoveRakeR dashboard. From here the user has
two main tabs: (1) Threshold explorer, and (2) Temporal inspector.

(1) The Threshold explorer tab
This tab uses a combination of some of the processes available in \code{clean_GPS} and
a soft 'rake' of the data leaning into the presentation within the \code{rake} function. This tab allows
the user to first label gapsections using the \code{gap_section} function (optionally), and then annotate data through:
\itemize{
\item Number of fixes per bird;
\item Bespoke existing flagged columns already in the data;
\item Missing longitude/latitude data;
\item Duplicate date-time stamps;
\item A minimum number of satellites;
\item Minimum PDOP and HDOP values;
\item Labelling of single gapsections from initial use of the \code{gap_section} function;
\item The trajectory speed filter through \code{speed_filt};
\item A custom simple trajectory speed filter threshold;
\item The turning angle filter as through \code{turn_filt};
\item A maximum perceived extent of the xy bounds; and
\item A combination of all columns selected.
}

These combinations can be viewed spatially in the map on the right-hand side and fixes labelled as potentially
'incorrect' can be coloured as red points separate to 'good' fixes plotted in blue, or NAs if relevant, as grey.
Individual TagIDs can also be selected from the plot and a built in time slider can subset data for specific temporal periods.

The 'raking' of the data takes place under the map presented as small gauges to assess what would be the
consequences of dropping data marked as erroneous and the contribution of these drops from the different
steps used. A DT::datatable is also provided to show which TagIDs contribute to these decisions per annotation.

The user can also export annotated data back to the current R session global environment.

(2) The temporal inspector tab
This tab has a separate map and timeslider that is linked to the threshold explorer tab. This can be used to bring
up numeric variables in the data and plot them through time using \code{ggplot} or {plotly}. This tab is therefore
handy to show variation over the covariates through time and where these fixes are spatially.

An interactive histogram is also provided to visualise the distribution of these variables.

A further visualisation of the density of animals tracked over time is provided using
the \code{tag_timeline} function, sensitive to the timeline slider, with options to adjust plotting over ggplot codes for date-time breaks.

This Shiny app is functional but will hopefully receive further updates going forward.
}
\examples{
indata <- yourdata # data.frame with a minimum of columns named TagID, DateTime, longitude, latitude
data <- Track(indata)
ShinyRakeR(data)

}
\seealso{
\link{rake}, @seealso \link{rake_outlie}
}
